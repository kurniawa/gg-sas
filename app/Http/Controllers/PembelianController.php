<?php

namespace App\Http\Controllers;

use App\Models\Cart;
use App\Models\CartItem;
use App\Models\Item;
use App\Models\Pembelian;
use App\Models\User;
use Illuminate\Http\Request;

class PembelianController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    public function konfirmasi_data_pelanggan(Request $request)
    {
        $post = $request->post();
        // dump($post);
        $phone = str_replace(' ', '', $post['phone']);
        $success_ = '';
        $errors_ = '';
        $pelanggan = null;
        if ($post['pembelian_sebagai'] === 'phone') {
            // CREATE TEMPORARY USER dari phone dan autogenerated password
            // CEK DULU APAKAH ADA phone yang sama?
            $pelanggan_same_kontak = User::where('phone', $phone)->first();
            // dd($pelanggan_same_kontak);
            if ($pelanggan_same_kontak !== null) {
                $errors_ .= 'Sudah ada user dengan nomor yang sama! Silahkan pilih Pelanggan sudah terdaftar/ter-registrasi!';
                return back()->with('errors_', $errors_);
            } else {
                $pelanggan = User::create([
                    'nama'=>'anonym',
                    'username'=>"0" . $phone,
                    'phone'=>$phone,
                    'password'=>bcrypt('anonym'),
                ]);
                $success_ .= 'User baru (temporary) berhasil dibuat!';
                session()->flash('success_',$success_);
            }
        }

        $cart = Cart::find($post['cart_id']);

        $data = [
            'pelanggan' => $pelanggan,
            'cart' => $cart,
            'goback' => 'pembelians.create',
            'previous_data' => $cart->id,
            'carts_data' => Cart::getCartsItemPerUser(),
            'pembelian_sebagai' => $post['pembelian_sebagai'],
        ];
        return view('pembelian.konfirmasi_data_pelanggan', $data);

    }

    public function methode_pembayaran(Request $request)
    {
        $post = $request->post();
        // dump($post);
        /**
         * Ini kan dari halaman konfirmasi data pelanggan.
         * Oleh karena itu maka disini di laksanakan step ubah cart->pelanggan_id ke user-id yang dipilih dari pelanggan baru / pelanggan terdaftar.
         *  */
        $success_ = '';
        $pelanggan = null;
        $cart = Cart::find($post['cart_id']);
        if ($post['pembelian_sebagai'] === 'phone' || $post['pembelian_sebagai'] === 'customer') {
            $cart->tipe_pelanggan = 'customer';
            $cart->pelanggan_id = $post['pelanggan_id'];
            $cart->guest_id = null;
            $cart->save();
            $success_ .= 'Guest telah diubah menjadi Customer.';
            session()->flash('success_',$success_);
            $pelanggan = User::find($cart->pelanggan_id);
        } else {
            session()->flash('warnings_','Lanjutkan sebagai Guest!');
        }
        $cart_items = CartItem::where('cart_id',$cart->id)->get();

        $data = [
            'goback' => 'pembelians.create',
            'previous_data' => $cart->id,
            'carts_data' => Cart::getCartsItemPerUser(),
            'pelanggan' => $pelanggan,
            'cart' => $cart,
            'cart_items' => $cart_items,
        ];
        return view('pembelian.methode_pembayaran', $data);
    }

    public function test_konfirmasi_data_pelanggan(Request $request)
    {
        $get = $request->query();
        // dump($get);
        $pelanggan = User::where('username', 'dummy')->first();

        $cart = Cart::find($get['cart_id']);

        $data = [
            'pelanggan' => $pelanggan,
            'cart' => $cart,
            'goback' => 'pembelians.create',
            'previous_data' => ['cart_id' => $cart->id],
            'carts_data' => Cart::getCartsItemPerUser(),
            'pembelian_sebagai' => $get['pembelian_sebagai'],
        ];
        return view('pembelian.konfirmasi_data_pelanggan', $data);
    }

    public function test_methode_pembayaran(Request $request)
    {
        $get = $request->query();
        // dump($get);
        /**
         * Ini kan dari halaman konfirmasi data pelanggan.
         * Oleh karena itu maka disini di laksanakan step ubah cart->pelanggan_id ke user-id yang dipilih dari pelanggan baru / pelanggan terdaftar.
         *  */
        $pelanggan = User::where('username', 'dummy')->first();
        $cart = Cart::find($get['cart_id']);
        $cart_items = CartItem::where('cart_id',$cart->id)->get();

        $data = [
            'goback' => 'pembelians.create',
            'previous_data' => ['cart_id' => $cart->id],
            'carts_data' => Cart::getCartsItemPerUser(),
            'pelanggan' => $pelanggan,
            'cart' => $cart,
            'cart_items' => $cart_items,
        ];
        return view('pembelian.methode_pembayaran', $data);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Request $request)
    {
        $get = $request->query();
        // dd($get);
        $data = [
            'goback'=>'carts.show',
            'previous_data'=>$get['cart_id'],
            'cart_id'=>$get['cart_id'],
            'carts_data'=>Cart::getCartsItemPerUser(),
        ];
        return view('pembelian.create', $data);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {

    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\Pembelian  $pembelian
     * @return \Illuminate\Http\Response
     */
    public function show(Pembelian $pembelian)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\Pembelian  $pembelian
     * @return \Illuminate\Http\Response
     */
    public function edit(Pembelian $pembelian)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\Pembelian  $pembelian
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Pembelian $pembelian)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Pembelian  $pembelian
     * @return \Illuminate\Http\Response
     */
    public function destroy(Pembelian $pembelian)
    {
        //
    }
}
